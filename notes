#!/bin/bash
#Read the readme file!
#run notes --help to see usage

version="v1.4.1.3"
db="$HOME/notes.db"
configFile="$HOME/.config/notes.config"

function notes() #main function
{
	loadConfig
	routine $@ 
	
	if [ -z $1 ] #listing notes
	then
		if [ "`count`" = "0" ]
		then
			recho "Empty ! Use notes add or notes --help."
			return
		fi
		getNotes | while IFS= read -r line;
		do
			i=$(($i+1))
			bluto "$i- $line"
			bline
		done
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "add" ] #adding notes with two ways
	then
		if [ -z $2 ] #first by notes add
		then
			recho "Write your note ^^"
			read  note
		else		#second by notes add ...
			shift
			note="$@"
		fi
		insertNote "$note"
		recho "Added ^^"
		notes
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "edit" ] #editing notes
	then
		if [ -z $2 ]
		then
			echo "Missing arguments (note number) :("
			return
		fi
		noteToEdit="`noteByNum $2`"
		if [ -z $3 ]
		then
			recho "Write your new note ^^"
			read  newNote
		else	
			shift;shift;
			newNote="$@"
		fi
		sqlite3 $db "UPDATE notes SET content = '$newNote' WHERE content = '$noteToEdit';"
		recho "Edited ^^"
		notes
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "delete" ] #deleting some or one note
	then
		if [ -z $2 ] 
		then
			echo "Missing arguments (note number) :("
			return
		fi
		getNotes > ".tmp"
		shift
		for i in $@
		do
			noteToDelete=`head -n$i .tmp | tail -n1`
			sqlite3 $db "DELETE FROM notes WHERE content = '$noteToDelete';"
		done
		rm ".tmp"
		recho  "Delted ^^"
		notes
	
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "search" ] #searching some or one note
	then
		if [ -z $2 ] 
		then
			echo "Missing arguments (keyword) :("
			return
		fi
    		sqlite3 $db "SELECT content FROM notes WHERE content LIKE '%$2%';" | while IFS= read -r line
    		do
    			i=$(($i+1))
    			bluto "$i- $line"
			bline

    		done
			
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "import" ] #including notes from a file
	then
		if [ -z $2 ] 
		then
			echo "Missing file name :("
			return
		fi
		if [ -f $2 ]
		then
			while IFS= read -r line;
			do
				insertNote "$line"
			
			done < $2
			recho "Imported ^^"
		else
			recho "Invalid file name :("
		fi
		notes
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "clear" ] #deleting all notes
	then
		if [ "$2" = "before" ] #keeping today's notes
		then
			clearBefore
		else			#clear all
			sqlite3 $db "DELETE FROM notes;"
		fi
		if [ -f "tmp.html" ]
		then
			rm "tmp.html"
		fi
		recho "Notes deleted ^^"
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "web" ] #display the note on the browser
	then
		echo "<ol>" > "tmp.html"
		getNotes | while IFS= read -r line;
		do
			if [ "$2" = "links" ] #as links
			then
				echo "<li><a href=$line >$line</a></li>" >> "tmp.html" 
			else		      #as normal text
				echo "<li>$line</li>" >> tmp.html 
			fi
		done 
		echo "</ol>" >> "tmp.html"
		firefox "tmp.html"
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "remind" ] #creating note reminder
	then
    		checkCommand "notify-send" || return
		checkCommand "at" || return
		
		if ! pgrep -x "atd" > /dev/null;
		then
    			recho "atd need to be running"
    			sudo systemctl start atd || service atd start
		fi

    		if [ -z "$2" ] || [ -z "$3" ]
    		then
        		echo "Missing arguments (note number or time) :("
        		return
    		fi
		
		if [ "$3" = "at" ]
		then
			echo "/usr/bin/notify-send '`noteByNum $2`'" | \
    			at  $4 &> /dev/null
    			recho "Done ^^"
			return
		fi
		
    		local noteNumber="$2"
    		shift 2
    		local timeInMinutes=$(convertToMinutes "$@")

    		echo "/usr/bin/notify-send '`noteByNum $noteNumber`'" | \
    		at now + "$timeInMinutes" minutes &> /dev/null
    		
    		if [ $? -ne 0 ]
    		then
    			recho "Invalid time format :( try like this: 1 hour 3 minutes"
        		return
    		fi
    		recho "Done ^^"
    		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "speak" ] #Reading aloud the notes
	then
		
		checkCommand "espeak" || return
		
		if [ "`count`" = "0" ]
		then
			espeak -s 130 "Empty ! Use note add, or help." &> /dev/null
			return
		fi
		
		getNotes | while IFS= read -r line;
		do
			i=$((i+1))
			espeak -s 130 "$i, $line." &> /dev/null 
				
		done

	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "export" ] #export the notes to a file
	then
		if [ -z $2 ]
		then
			echo "Missing arguments (file name) :("
			return
		else
			if [ "$3" = "json" ]
			then
				sqlite3 $db "SELECT id, content, timestamp FROM notes;" | \
				awk -v RS= -v OFS=',' -F'\n' '{
        			print "[";
        			for (i = 1; i <= NF; i++) {
            			split($i, fields, "|");
           		 	print "  {";
            			print "    \"id\": " fields[1] ",";
            			print "    \"content\": \"" fields[2] "\",";
            			print "    \"timestamp\": \"" fields[3] "\"";
            			print "  }";
            			if (i < NF) {
                		print ",";
            			}
        			}
        			print "]";
    				}' > "$2.json"
    				recho "$2.json notes copy created ^^"
			else
				getNotes > `"$2"`
				recho "$2 notes copy created ^^"
			fi
		fi
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "copy" ] #copy a note to the clipboard
	then
		checkCommand "xclip" || return
		if [ -z $1 ]
    		then
       			 echo "Missing arguments (note number) :("
        		return
    		fi
    		noteToCopy="`noteByNum $2`"
    		echo -n "$noteToCopy" | xclip -selection clipboard
    		recho "Copied to clipboard ^^"

	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "update" ] #copy a note to the clipboard
	then
		latestVersion=$(curl -s "https://api.github.com/repos/Mohamed-Abbas-Homani/BashNotesApp/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")') 

    		if [[ "$latestVersion" != "$version" ]]
    		then
        		recho "A new version ($latestVersion) is available ^^"
    		else
        		recho "BashNotesApp is up to date ^^"
        		return
    		fi

    		git clone --depth 1 https://github.com/Mohamed-Abbas-Homani/BashNotesApp.git tmp_BashNotesApp &> /dev/null
    		sudo cp -f tmp_BashNotesApp/notes /usr/bin/notes
		rm -rf tmp_BashNotesApp
    		recho "Update complete ^^"
    		recho "Use notes --help to see what is new!"

	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "--help" ] ||  [ "$1" = "-h" ] #help
	then
		recho "use notes for listing notes"
		recho "use notes add to add new notes"
		recho "use notes delete nb-note to delete a note"
		recho "use notes edit nb-note new-note to edit a note"
		recho "use notes clear to delete all notes, add before to delete all notes without today's notes"
		recho "use notes web to see the notes on firefox and links to them as links"
		recho "use notes import fileName to include a notes file each note on a line"
		recho "use notes export to export the notes to a file"
		recho "use notes search keywords to search for one or more notes"
		recho "use notes copy nb-note to copy the note to the clipboard"
		recho "use notes speak to listen to the notes"
		bluto "New ^^"
		recho "use notes update to auto-check update and update the app!"
		recho "use notes remind nb-note 2 hours 5 minutes or use notes remind nb-notes at 10:30"
		recho "use notes --version or notes -v for the current version"
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "version" ] ||  [ "$1" = "-v" ] #version
	then
		echo $version
		
	#-------------------------------------------------------------------------------------------------------- 
	else 			#invalid options
		recho "Invalid option :(, use notes --help"
	fi
}

function loadConfig()
{
	if [ -f $configFile ]
	then
		source $configFile
	else
		echo "Missing notes.config file :("
	fi
}

function routine()
{
	createNotesTable
	
	if [ "$DELETE_ALL_DAILY" = "true" ]
	then
		clearBefore
	fi
}

function clearBefore()
{
	sqlite3 $db "DELETE FROM notes WHERE date(timestamp) != date('now', 'localtime');"
}

function bluto() #echo with blue color
{
	echo -e "\e[34m$@\e[0m"
}

function recho() #echo with red color
{
	echo -e "\e[31m$@\e[0m"
}

function bline()
{
	bluto `printf '%.0s-' {1..50}`
}

function createNotesTable() #Create the notes table if not exist
{
	sqlite3 $db "CREATE TABLE IF NOT EXISTS notes (id INTEGER PRIMARY KEY, content TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP);"
}

function getNotes() #get all notes
{
	sqlite3 $db "SELECT content FROM notes;" 
}

function insertNote() #insert single note
{
	note="$@"
	sqlite3 $db "INSERT INTO notes (content) VALUES ('$note');"
}

function noteByNum() #get note content by its number
{
	getNotes | head -n$1 | tail -n1
}

function count()
{
    sqlite3 $db "SELECT COUNT(*) FROM notes;"
}

function convertToMinutes() {
    local totalMinutes=0

    for arg in "$@"; do
        case $arg in
            "hour" | "hours")
                totalMinutes=$((totalMinutes + 60 * ${prevArg:-0}))
                ;;
            "minute" | "minutes")
                totalMinutes=$((totalMinutes + ${prevArg:-0}))
                ;;
            *)
                prevArg=$arg
                ;;
        esac
    done

    echo $totalMinutes
}

function checkCommand()
{
	if ! command -v $1 &> /dev/null
    	then
      		recho "$1 needed :("
        	return 1
    	fi
}

notes $@
