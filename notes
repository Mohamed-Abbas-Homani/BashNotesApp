#!/bin/bash
#light version of BashNotesApp
#read the readme file!
#run notes --help to see usage

version="v1.4.1.3"
db="$HOME/notes.db"

function notes() #main function
{ 	
	create

	if [ "$1" = "-l" ] || [ -z $1 ] #List notes
	then
		getNotes | while IFS= read -r line;
		do
			i=$(($i + 1))
			echo "$i $line"
		done
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "-a" ] #Add note.
	then
		if [ -z $2 ]
		then
			return 1
		else		
			shift
			insertNote "$*"
		fi
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "-e" ] #Edit note.
	then
		if [ -z $2 ] || [ -z $3 ]
		then
			return 1
		fi
		noteToEdit="`noteByNum $2`"
		shift;shift;
		sqlite3 $db "UPDATE notes SET content = '$*' WHERE content = '$noteToEdit';"
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "-d" ] #Delete notes.
	then
		if [ -z $2 ] 
		then
			return 1
		fi
		getNotes > ".tmp"
		shift
		for i in $@
		do
			noteToDelete=`head -n$i .tmp | tail -n1`
			sqlite3 $db "DELETE FROM notes WHERE content = '$noteToDelete';"
		done
		rm ".tmp"

	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "-da" ] #Clear.
	then
		sqlite3 $db "DELETE FROM notes;"

	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "-u" ] #Update version.
	then
		latestVersion=$(curl -s "https://api.github.com/repos/Mohamed-Abbas-Homani/BashNotesApp/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")') 

    		if [[ "$latestVersion" = "$version" ]]
    		then
        		return 0
    		fi

    		git clone --depth 1 -b light https://github.com/Mohamed-Abbas-Homani/BashNotesApp.git tmp_BashNotesApp &> /dev/null
    		sudo cp -f tmp_BashNotesApp/notes /usr/bin/notes
		rm -rf tmp_BashNotesApp
    		return 0
	
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "--help" ] ||  [ "$1" = "-h" ] #Help
	then
		recho "use notes for listing notes"
		recho "use notes -a to add new notes"
		recho "use notes -d nb-note to delete a note, or -da to delete all"
		recho "use notes -e nb-note new-note to edit a note"
		recho "use notes -u to auto-check update and update the app!"
		recho "use notes --version or notes -v for the current version"
		
	#-------------------------------------------------------------------------------------------------------- 
	elif [ "$1" = "--version" ] ||  [ "$1" = "-v" ] #version
	then
		echo $version
		
	#-------------------------------------------------------------------------------------------------------- 
	else 		
		echo "try notes --help"
		return 1
	fi
}

function create() #Create the notes table if not exist
{
	if ! command -v sqlite3 &> /dev/null
    	then
      		recho "sqlite3 not found."
        	return 1
    	fi
	sqlite3 $db "CREATE TABLE IF NOT EXISTS notes (id INTEGER PRIMARY KEY, content TEXT, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP);"
}

function getNotes() #get all notes
{
	sqlite3 $db "SELECT content FROM notes;" 
}

function insertNote() #insert single note
{
	note="$@"
	sqlite3 $db "INSERT INTO notes (content) VALUES ('$note');"
}

function noteByNum() #get note content by its number
{
	getNotes | head -n$1 | tail -n1
}

notes $@
